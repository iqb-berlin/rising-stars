---
lang: de
title: Testinhalte - Survey Content Package
---

Die Datenstruktur **survey content package** enthält alle Daten, die für die Durchführung und Auswertung einer Testung erforderlich sind. Es sind lediglich die Testpersonen hinzuzufügen. Außerdem müssen an mehreren Stellen Entscheidungen getroffen werden, um die Testung und die Rückmeldung auf die Ziele abzustimmen.

```{mermaid}
flowchart LR
classDef root fill:#0ff,stroke:black
    classDef level1 fill:#0ff,stroke:black
    classDef level2 fill:#cff,stroke:black
    classDef metadata fill:whitesmoke,stroke:black
    linkStyle default stroke:black,stroke-width:2px,color:black;

    content[survey content package]:::level1
    click content "content.html" "Gehe zu Testinhalte"
    cmd(metadata):::metadata
    units[units]:::level2
    testlets[testlets]:::level2
    booklets[booklets]:::level2
    analysis_s[analysis scheme]:::level2
    content --> cmd
    content --> units
    content --> testlets
    content --> booklets
    content --> analysis_s
```

# Metadaten

Es handelt sich um eine Datenstruktur, die in einem Register oder Datenpool bereitsteht für die Verwendung. Daher sind diverse Metadaten erforderlich, die die Auswahl eines Inhaltspaketes für eine spezifische Testung unterstützen. Beispiele: Testdomänen (z. B. Englisch Leseverstehen), empfohlene Testpopulation (z. B. Klasse 5), Autoren, Erstellungsjahr, Nutzungsrechte, erforderliche Hilfsmittel (Taschenrechner) usw.

# Units

Ein Unit ist nicht nur eine Gruppierung von Frage-Einheiten eines Test oder einer Befragung, die die für die Auswertung relevanten Antworten erzeugen. Der Begriff Unit deckt auch Zwischenseiten für die Einleitung (Willkommen-Seite) oder Erläuterungen für den folgenden Testablauf ab (Bitte Kopfhörer aufsetzen). Diese Art Units werden Orientierungsseiten `orientation units` genannt. Eine weitere Art von Units stellen die Übungsaufgaben `training units` dar, die meist zu Beginn einer Testung in den Umgang mit den Antwortelementen einführen. Diese besonderen Units sind zwar Teil des Inhaltspaketes, sind aber grundsätzlich technisch mit den `assessment units` identisch.

Eine Unit soll möglichst unabhängig von anderen Units und auch von der konkreten Position innerhalb des Testablaufes sein. Dies ist für viele Auswertungsmodelle eine Voraussetzung. Außerdem vereinfacht dies das Management.

Folgende Daten enthält eine Unit:

* `UI definition`: Daten zur Darstellung und zur Festlegung der Interaktion während der Beantwortung. Hier muss auch ein `player` festgelegt sein (Verona-Modul, das die Unitdefinition auswertet und im Test darstellt). Für eine Unitdefinition gibt es keine übergreifende Spezifizierung. Technisch handelt es sich um Strings.
* `metadata`: Metadaten, die keine technische Bedeutung haben, sondern nur der Kategorisierung bei Auswertung und Anzeige dienen. Wie Werte für Metadaten gespeichert werden, ist [hier spezifiziert](https://iqb-specifications.github.io/metadata-values/).
* `coding-scheme`: Das Kodierschema legt fest, wie eine Antwort kodiert werden soll. Als Antwort wird hier die kleinste erfassbare Eingabe der Testperson verstanden oder auch ein Zustand (Fortschritt der Audiosequenz) und heißt in den Daten *Variable*. Die Vorschrift kann als Regel hinterlegt werden - dann erfolgt eine automatische Kodierung. Sie kann aber auch als Instruktion (Text, Bild) gespeichert sein zur Anzeige bei der manuellen Kodierung. Um einen Wert für ein Item (Analyse-Bewertungsebene) zu liefern, können neue Variablen abgeleitet werden, d. h. ein Itemwert kann das Ergebnis der Kodierung mehrerer Antworten sein. Die Datenstruktur eines Kodierschemas ist [hier spezifiziert](https://iqb-specifications.github.io/coding-scheme/) und [hier beschrieben](https://iqb-berlin.github.io/tba-info/coding/data-structures/coding-scheme.html).
* `items`: Eine oder mehrere Antworten führen zur Ebene, die eine Bewertung ermöglicht. Das bedeutet, dass der Itemwert (i.d.R. 0/1/missing) erst nach der Kodierung zur Verfügung steht. Ein Item hat außerdem Metadaten, zusätzlich zu den Unit-Metadaten. Diese betreffen die Zuordnung zu Kategorien für Anzeige und Auswertung sowie numerische Werte für die Datenanalyse (z. B. Schwierigkeit). Wie Werte für Metadaten gespeichert werden, ist [hier spezifiziert](https://iqb-specifications.github.io/metadata-values/).

Sämtliche Daten einer Unit sind in einer Datenstruktur zusammengefasst. Es handelt sich um eine XML-Datei ggf. mit ergänzenden Dateien und Abhängigkeiten. Es ist eine [Spezifikation](https://github.com/iqb-berlin/testcenter/blob/master/definitions/vo_Unit.xsd)(XSD-Datei) verfügbar sowie eine [Erläuterung/Kurzdokumentation](https://iqb-berlin.github.io/tba-info/Testcenter/Testinhalte/unit-xml.html).

# Testlets

Für die Erstellung der Testhefte (Booklets) werden zunächst Blöcke (testlets) zusammengestellt. Es handelt sich um Unit-Folgen für eine definierte Testzeit (10 min, 20 min). Die Auswahl bezieht sich meist auf eine bestimmten Subdomäne, und die Reihenfolge ergibt sich aus aufwändigen Überlegungen z. B. über die Verteilung der Schwierigkeit.

# Booklets

Ein Booklet (analog zu Papier "Testheft") legt die Abfolge der Units fest. Das Grundmodell sieht eine Sequenz vor, also eine einfache Aneinanderreihung, die alle Testpersonen absolvieren sollen. Hauptinhalt eines Booklets sind also Verweise auf Units.

Dass vorher Blöcke (testlets) definiert werden, ist nicht erforderlich, aber zu empfehlen. Das Booklet besteht dann aus einer Folge von Blöcken, verbunden mit Orientierungsseiten.

Jedes Booklet ist als XML-Datei gespeichert. Dafür ist eine [Spezifikation](https://github.com/iqb-berlin/testcenter/blob/master/definitions/vo_Bookklet.xsd)(XSD-Datei) verfügbar und es gibt eine [Dokumentation für Testverantwortliche](https://iqb-berlin.github.io/tba-info/Testcenter/Testinhalte/booklet-xml.html). Diese Booklet-Datei ist erforderlich für die Testdurchführung und wird in das Testcenter hochgeladen. Hier eine Auswahl der Steuerungsmöglichkeiten über Booklet-Parameter:

* Zeitsteuerung (für die Bearbeitung bestimmter Units gibt es eine Zeitobergrenze)
* Synchronisation des Testablaufes durch Freigabeworte für Blöcke
* adaptives Testen (Präsentation von Units in Abhängigkeit vorher gegebener Antworten)

# Analyse-Schema

Diese Datenstruktur enthält Vorschriften und Daten für die Datenanalyse.